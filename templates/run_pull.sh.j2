#!/bin/bash

#####
#
# Cant use ansible pull until theres a way to auto install roles
#
#####
format_log() {
    printf "\nLOG - %s - %s\n" "$(date)" "$1"
}

format_log "Using project working directory {{ pull_job.project_dir }}"

if [ -f "{{ pull_job.project_dir }}/repo_rsa_key" ]; then
    format_log "Using identity file {{ pull_job.project_dir }}/repo_rsa_key"
    export GIT_SSH_COMMAND='ssh -i {{ pull_job.project_dir }}/repo_rsa_key'
fi

format_log "Using ansible config file $ANSIBLE_CONFIG"
export ANSIBLE_CONFIG={{ ansible_local.pull.default_config_file }}

cd {{ pull_job.job_dir }}
if [ -d "./{{ _scm_url_parts.project }}" ]; then
    rm -rf "./{{ _scm_url_parts.project }}"
fi

format_log "Cloning {{ pull_job_repo_url }}"
git clone {{ pull_job_repo_url }} {{ _scm_url_parts.project }}
cd "./{{ _scm_url_parts.project }}"

{% if not pull_job_use_project_pipfile %}
format_log "Removing project pipfiles, will use default"
rm -f Pipfile*
{% endif %}

format_log "Using pipfile located in $({{ ansible_local.pull.pipenv }} --where)"
format_log "Starting sync of pipenv packages"
{{ ansible_local.pull.pipenv }} --bare install
format_log "Done syncing pipenv"

if [ -f roles/requirements.yml ]; then
    format_log "Installing ansible requirements"
    {{ ansible_local.pull.pipenv }} run ansible-galaxy install -r roles/requirements.yml --force
    format_log "Finished installing requirements"
fi

format_log "Starting playbook run"
{{ ansible_local.pull.pipenv }} run ansible-playbook -i {{ pull_job_hosts_file }} {{ pull_job_playbook }}
format_log "Finished playbook run"
